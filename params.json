{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"### knockout-layers2d\r\n\r\n## Demo\r\n\r\n[layers2d.html](./layers2d.html) shows the binding in action, with a stack of independently managed layers being rendered in sequence.\r\n\r\n## Status\r\nThis is a quick proof of concept. I was curious what data-binding for the canvas element might look like. The procedural nature of canvas makes it quite well suited to a simple list of instructions. Performance-wise, knockout adds a lot of fluff if you are just interested in rendering things fast. But, if you are already using knockout elsewhere on the page, maybe the convenience of this approach would tip the balance. \r\n\r\n## TODOs\r\nThe getContext('2d') is relatively expensive- we dont' want to call that each tick. So I've stuck it on the viewModel value for now, but that's not right either. Maybe the init step for the binding can be used to stash it somewhere nice. \r\n\r\nI've used array iteractors ([].forEach) with no affordance for older browsers. As we also expect the canvas element to exist, I'm not too stressed about this. I'm using AMD (via require.js) to load the dependencies and the image assets. That's orthogonal to the actual knockout binding implementation itself, and could be refactored to use an UMD (optional AMD) pattern perhaps.\r\n\r\nFor the demo, it would be nice to scroll the background while we walk. It would be easy to add keyboard left/right control. Maybe jump. That's all besides the point, don't encourage me. \r\n\r\nThere's a ton of refactoring could take place in the demo. I'm already reusing arrays by using splice to update values. Maybe a pool of objects would help smooth out garbage collection too. \r\n\r\n","name":"Knockout-layers2d","google":"","tagline":"A knockout.js binding for 2d canvas context, to render an array of layers - each a series of instructions for the context"}